package leetcode.editor.cn.Q112;

//ÁªôÂÆö‰∏Ä‰∏™‰∫åÂèâÊ†ëÂíå‰∏Ä‰∏™ÁõÆÊ†áÂíåÔºåÂà§Êñ≠ËØ•Ê†ë‰∏≠ÊòØÂê¶Â≠òÂú®Ê†πËäÇÁÇπÂà∞Âè∂Â≠êËäÇÁÇπÁöÑË∑ØÂæÑÔºåËøôÊù°Ë∑ØÂæÑ‰∏äÊâÄÊúâËäÇÁÇπÂÄºÁõ∏Âä†Á≠â‰∫éÁõÆÊ†áÂíå„ÄÇ 
//
// ËØ¥Êòé: Âè∂Â≠êËäÇÁÇπÊòØÊåáÊ≤°ÊúâÂ≠êËäÇÁÇπÁöÑËäÇÁÇπ„ÄÇ 
//
// Á§∫‰æã: 
//ÁªôÂÆöÂ¶Ç‰∏ã‰∫åÂèâÊ†ëÔºå‰ª•ÂèäÁõÆÊ†áÂíå sum = 22Ôºå 
//
//               5
//             / \
//            4   8
//           /   / \
//          11  13  4
//         /  \      \
//        7    2      1
// 
//
// ËøîÂõû true, Âõ†‰∏∫Â≠òÂú®ÁõÆÊ†áÂíå‰∏∫ 22 ÁöÑÊ†πËäÇÁÇπÂà∞Âè∂Â≠êËäÇÁÇπÁöÑË∑ØÂæÑ 5->4->11->2„ÄÇ 
// Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ 
// üëç 469 üëé 0


//leetcode submit region begin(Prohibit modification and deletion)

import java.util.ArrayDeque;
import java.util.Queue;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    //ÁªôÂÆöÂ¶Ç‰∏ã‰∫åÂèâÊ†ëÔºå‰ª•ÂèäÁõÆÊ†áÂíå sum = 22Ôºå
//
//               5
//             / \
//            4   8
//           /   / \
//          11  13  4
//         /  \      \
//        7    2      1
//
//
// ËøîÂõû true, Âõ†‰∏∫Â≠òÂú®ÁõÆÊ†áÂíå‰∏∫ 22 ÁöÑÊ†πËäÇÁÇπÂà∞Âè∂Â≠êËäÇÁÇπÁöÑË∑ØÂæÑ 5->4->11->2„ÄÇ 
    //info: Ëß£Á≠îÊàêÂäü: //	ÊâßË°åËÄóÊó∂:0 ms,ÂáªË¥•‰∫Ü100.00% ÁöÑJavaÁî®Êà∑ //	ÂÜÖÂ≠òÊ∂àËÄó:38.4 MB,ÂáªË¥•‰∫Ü75.90% ÁöÑJavaÁî®Êà∑ (a minute ago)
//    public boolean hasPathSum(TreeNode root, int sum) {
//        if(root == null)return false;
//
//        if(root.left==null&&root.right==null&&(sum-root.val)==0)return true;
//
//        return hasPathSum(root.left, sum- root.val)|| hasPathSum(root.right, sum- root.val);
//
//    }

    public boolean hasPathSum(TreeNode root, int sum) {
        System.out.println();
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.add(root);
        root.val = sum - root.val;

        while (!queue.isEmpty()) {
            TreeNode node = queue.poll();
            if (node.left == null && node.right == null && (node.val) == 0) return true;

            if (node.left != null) {
                node.left.val = node.val - node.left.val;
                queue.add(node.left);

            }
            if (node.right != null) {
                node.right.val = node.val - node.right.val;
                queue.add(node.right);
            }


        }
        return false;

    }
}
//leetcode submit region end(Prohibit modification and deletion)


class test112 {
    public static void main(String[] args) {
        int[] array = {5, 4, 8, 11, -1, 13, 4, 7, 2, -1, -1, -1, 1};
        TreeNode node = buildTree(array, 0);
        printTree(node);
        Solution solution = new Solution();
        System.out.println("result: " + solution.hasPathSum(node, 22));

    }

    static TreeNode buildTree(int[] nodes, int index) {
        if (nodes.length <= index || nodes[index] == -1) return null;

        TreeNode node = new TreeNode(nodes[index]);

        node.left = buildTree(nodes, 2 * index + 1);
        node.right = buildTree(nodes, 2 * index + 2);
        return node;
    }

    public static void printTree(TreeNode root) {
        System.out.println();
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.add(root);
        int currentCount = 1, nextCount = 0;

        while (!queue.isEmpty()) {
            TreeNode node = queue.poll();
            currentCount--;

            if (node != null) {
                System.out.print(node.val + " ");
                if (node.left != null) {
                    queue.add(node.left);
                    nextCount++;
                }
                if (node.right != null) {
                    queue.add(node.right);
                    nextCount++;
                }
            }

            if (currentCount == 0) {
                currentCount = nextCount;
                nextCount = 0;
                System.out.println();
            }

        }

    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int x) {
        val = x;
    }
}
